<Window x:Class="ChatApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ChatApp" xmlns:ViewModel="clr-namespace:ChatClient.MVVM.ViewModel"
        mc:Ignorable="d"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        Height="500" Width="840"
        Background="#36393F"
        WindowStyle="None"
        AllowsTransparency="True"
        ResizeMode="CanResizeWithGrip">

    <Window.Resources>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="RoundedButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#EAB01E"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#EAB01E"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#F1CA68"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#F1CA68"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Window.DataContext>
        <ViewModel:MainViewModel/>
    </Window.DataContext>

    <!--Это наиболее мощный и часто используемый контейнер, напоминающий обычную таблицу. 
    Он содержит столбцы и строки, количество которых задает разработчик. 
    Для определения строк используется свойство RowDefinitions, 
    а для определения столбцов - свойство ColumnDefinitions:-->




    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="25"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Border Grid.ColumnSpan="2"
                Background="#252525"
                MouseDown="OnBorderMouseDown">
            <Grid HorizontalAlignment="Stretch">
                <Label Content="SGS Chat"
                       Foreground="Gray"
                       FontWeight="SemiBold"/>

                <StackPanel HorizontalAlignment="Right"
                            Orientation="Horizontal">
                    <!--кнопка cвернуть-->
                    <Button Width="20"
                            Height="20"
                            Content="_"
                            Background="Transparent"
                            BorderThickness="0"
                            Foreground="Gray"
                            FontWeight="Bold"
                            Margin="0,0,0,3"
                            Click="OnMinimizeButtonClick"/>

                    <!--кнопка развернуть-->
                    <Button Width="20"
                            Height="20"
                            Content="☐"
                            Background="Transparent"
                            BorderThickness="0"
                            Foreground="Gray"
                            FontWeight="Bold"
                            Click="OnMaximizedButtonClick"/>

                    <!--кнопка закрыть-->
                    <Button Width="20"
                            Height="20"
                            Content="✕"
                            Background="Transparent"
                            BorderThickness="0"
                            Foreground="Gray"
                            FontWeight="Bold"
                            Click="OnCloseButtonClick"/>

                </StackPanel>
            </Grid>
        </Border>
        <Grid Grid.Row="1">

            <!--Ширина столбцов сетки-->
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="200"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>

            <!--Определяет область, в которой можно упорядочивать дочерние элементы
        горизонтально либо вертикально относительно друг друга.-->
            <DockPanel>

                <!--Текстовое поле принимающее имя пользователя
            UpdateSourceTrigger: Односторонняя привязка от источника к приемнику практически мгновенно изменяет свойство приемника
            PropertyChanged: источник привязки обновляется сразу после обновления свойства в приемнике-->
                <TextBox Height="25"
                     DockPanel.Dock="Top"
                     Text="{Binding UserName, UpdateSourceTrigger=PropertyChanged}" 
                     Style="{StaticResource UserNameBox}"
                     />

                <!--Кнопка для подключения клиента к серверу-->
                <Button Style="{StaticResource RoundedButtonStyle}" 
                    Height="25"
                    DockPanel.Dock="Top"
                    Content="Connect"
                    Command="{Binding ConnectToServerCommand}"
                    Background="#FF64CCF1"
                    Foreground="White"/>

                <!--Привязка списка к элементам обозреваемой коллекции из пользователей-->
                <ListView ItemsSource="{Binding Users}">
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <!--Привязка текста к имени пользователя-->
                            <TextBlock Text="{Binding UserName}"/>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </DockPanel>

            <!--StackPanel: Выравнивает дочерние элементы в одну линию, ориентированную горизонтально или вертикально.-->
            <StackPanel Grid.Column="1" VerticalAlignment="Center">


                <ListView Height="395"
                          ItemsSource="{Binding Messages}"/>


                <StackPanel Orientation="Horizontal" Height="76">

                    <TextBox Height="60"
                         Width="548"
                         VerticalContentAlignment="Center"
                         Text="{Binding Message, UpdateSourceTrigger=PropertyChanged}" 
                         Style="{StaticResource MessageBox}"/>

                    <Button Style="{DynamicResource RoundedButtonStyle}"
                        Width="67"
                        Content="Send"
                        Command="{Binding SendMessageCommand}"
                        Background="#FF64CCF1"
                        Foreground="White" Height="62"/>
                </StackPanel>

            </StackPanel>

        </Grid>

    </Grid>
</Window>
